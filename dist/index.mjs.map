{"version":3,"file":"index.mjs","sources":["../src/lib/type-guards.ts","../src/lib/PaginatedMessage.ts","../src/lib/LazyPaginatedMessage.ts"],"sourcesContent":["import type {\n\tCategoryChannel,\n\tChannel,\n\tDMChannel,\n\tGuildChannel,\n\tNewsChannel,\n\tPartialGroupDMChannel,\n\tStoreChannel,\n\tTextChannel,\n\tVoiceChannel\n} from 'discord.js';\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/CategoryChannel CategoryChannel}\n * @param channel The channel to check\n */\nexport function isCategoryChannel(channel: Channel): channel is CategoryChannel {\n\treturn channel.type === 'category';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/DMChannel DMChannel}\n * @param channel The channel to check\n */\nexport function isDMChannel(channel: Channel): channel is DMChannel {\n\treturn channel.type === 'dm';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/PartialGroupDMChannel PartialGroupDMChannel}\n * @param channel The channel to check\n */\nexport function isGroupChannel(channel: Channel): channel is PartialGroupDMChannel {\n\treturn channel.type === 'group';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/GuildChannel GuildChannel}\n * @param channel The channel to check\n */\nexport function isGuildBasedChannel(channel: Channel): channel is GuildChannel {\n\treturn channel.type !== 'dm' && channel.type !== 'group' && channel.type !== 'unknown';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/NewsChannel NewsChannel}\n * @param channel The channel to check\n */\nexport function isNewsChannel(channel: Channel): channel is NewsChannel {\n\treturn channel.type === 'news';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/StoreChannel StoreChannel}\n * @param channel The channel to check\n */\nexport function isStoreChannel(channel: Channel): channel is StoreChannel {\n\treturn channel.type === 'store';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/TextChannel TextChannel}\n * @param channel The channel to check\n */\nexport function isTextChannel(channel: Channel): channel is TextChannel {\n\treturn channel.type === 'text';\n}\n\n/**\n * Checks whether a given channel is a {@link https://discord.js.org/#/docs/main/stable/class/VoiceChannel VoiceChannel}\n * @param channel The channel to check\n */\nexport function isVoiceChannel(channel: Channel): channel is VoiceChannel {\n\treturn channel.type === 'voice';\n}\n","import type { APIMessage, User, TextChannel, NewsChannel, Message, MessageReaction, ReactionCollector } from 'discord.js';\n\nexport class PaginatedMessage {\n\tpublic pages: MessagePage[];\n\tpublic messages: (APIMessage | null)[] = [];\n\n\tpublic actions = new Map<string, IPaginatedMessageAction>();\n\n\tpublic index = 0;\n\n\tpublic idle = 20 * 1000;\n\n\tpublic constructor({ pages, actions = PaginatedMessage.defaultActions }: PaginatedMessageOptions = {}) {\n\t\tthis.pages = pages ?? [];\n\n\t\tfor (const page of this.pages) this.messages.push(typeof page === 'function' ? null : page);\n\t\tfor (const action of actions) this.actions.set(action.id, action);\n\t}\n\n\tpublic setIndex(index: number) {\n\t\tthis.index = index;\n\t\treturn this;\n\t}\n\n\tpublic setIdle(idle: number) {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\tpublic setActions(actions: IPaginatedMessageAction[]) {\n\t\tthis.actions.clear();\n\t\treturn this.addActions(actions);\n\t}\n\n\tpublic addActions(actions: IPaginatedMessageAction[]) {\n\t\tfor (const action of actions) this.addAction(action);\n\t\treturn this;\n\t}\n\n\tpublic addAction(action: IPaginatedMessageAction) {\n\t\tthis.actions.set(action.id, action);\n\t\treturn this;\n\t}\n\n\tpublic setPages(pages: MessagePage[]) {\n\t\tthis.pages = pages;\n\t\treturn this;\n\t}\n\n\tpublic addPages(pages: MessagePage[]) {\n\t\tthis.pages.push(...pages);\n\t\treturn this;\n\t}\n\n\tpublic addPage(page: MessagePage) {\n\t\tthis.pages.push(page);\n\t\treturn this;\n\t}\n\n\tpublic async run(author: User, channel: TextChannel | NewsChannel) {\n\t\tawait this.resolvePagesOnRun();\n\n\t\tif (!this.messages.length) throw new Error('There are no messages.');\n\t\tif (!this.actions.size) throw new Error('There are no messages.');\n\n\t\tconst firstPage = this.messages[this.index]!;\n\n\t\tconst response = (await channel.send(firstPage)) as Message;\n\n\t\tfor (const id of this.actions.keys()) await response.react(id);\n\n\t\tconst collector = response\n\t\t\t.createReactionCollector(\n\t\t\t\t(reaction: MessageReaction, user: User) =>\n\t\t\t\t\t(this.actions.has(reaction.emoji.identifier) || this.actions.has(reaction.emoji.name)) && user.id === author.id,\n\t\t\t\t{ idle: this.idle }\n\t\t\t)\n\t\t\t.on('collect', async (reaction, user) => {\n\t\t\t\tawait reaction.users.remove(user);\n\n\t\t\t\tconst action = (this.actions.get(reaction.emoji.identifier) ?? this.actions.get(reaction.emoji.name))!;\n\n\t\t\t\tawait action.run({\n\t\t\t\t\thandler: this,\n\t\t\t\t\tauthor,\n\t\t\t\t\tchannel,\n\t\t\t\t\tresponse,\n\t\t\t\t\tcollector\n\t\t\t\t});\n\n\t\t\t\tconst page = await this.resolvePage();\n\n\t\t\t\tawait response.edit(page!);\n\t\t\t})\n\t\t\t.on('end', () => response.reactions.removeAll());\n\n\t\treturn this;\n\t}\n\n\tpublic async resolvePagesOnRun() {\n\t\tfor (let i = 0; i < this.pages.length; i++) await this.resolvePage(i);\n\t}\n\n\tpublic async resolvePage(index: number = this.index) {\n\t\tconst page = this.pages[index];\n\t\t// @ts-expect-error 2349\n\t\tif (page) this.messages[index] ??= await this.pages[index](index, this.pages, this);\n\t\treturn this.messages[index];\n\t}\n\n\tpublic clone() {\n\t\tconst clone = new PaginatedMessage({ pages: this.pages, actions: [] }).setIndex(this.index).setIdle(this.idle);\n\t\tclone.actions = this.actions;\n\t\treturn clone;\n\t}\n\n\tpublic static defaultActions: IPaginatedMessageAction[] = [\n\t\t{\n\t\t\tid: '🔢',\n\t\t\trun: async ({ handler, author, channel }) => {\n\t\t\t\tconst questionMessage = await channel.send('What would you like to jump to?');\n\t\t\t\tconst collected = await channel\n\t\t\t\t\t.awaitMessages((message: Message) => message.author.id === author.id, { max: 1, idle: 15 * 1000 })\n\t\t\t\t\t.catch(() => null);\n\n\t\t\t\tif (collected) {\n\t\t\t\t\tconst responseMessage = collected.first();\n\n\t\t\t\t\tif (questionMessage.deletable) await questionMessage.delete();\n\t\t\t\t\tif (responseMessage) {\n\t\t\t\t\t\tif (responseMessage.deletable) await responseMessage.delete();\n\n\t\t\t\t\t\tconst i = Number(responseMessage.content) - 1;\n\n\t\t\t\t\t\tif (!Number.isNaN(i) && handler.pages[i]) handler.index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏪',\n\t\t\trun: ({ handler }) => (handler.index = 0)\n\t\t},\n\t\t{\n\t\t\tid: '◀️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index !== 0) --handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '▶️',\n\t\t\trun: ({ handler }) => {\n\t\t\t\tif (handler.index !== handler.pages.length - 1) ++handler.index;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: '⏩',\n\t\t\trun: ({ handler }) => (handler.index = handler.pages.length - 1)\n\t\t},\n\t\t{\n\t\t\tid: '⏹️',\n\t\t\trun: async ({ response, collector }) => {\n\t\t\t\tawait response!.reactions.removeAll();\n\t\t\t\tcollector!.stop();\n\t\t\t}\n\t\t}\n\t];\n}\n\nexport interface IPaginatedMessageAction {\n\tid: string;\n\trun(context: PaginatedMessageActionContext): Awaited<unknown>;\n}\n\nexport interface PaginatedMessageActionContext {\n\thandler: PaginatedMessage;\n\tauthor: User;\n\tchannel: TextChannel | NewsChannel;\n\tresponse: Message;\n\tcollector: ReactionCollector;\n}\n\nexport interface PaginatedMessageOptions {\n\tpages?: MessagePage[];\n\tactions?: IPaginatedMessageAction[];\n}\n\nexport type MessagePage = ((index: number, pages: MessagePage[], handler: PaginatedMessage) => Awaited<APIMessage>) | APIMessage;\n\ntype Awaited<T> = PromiseLike<T> | T;\n","import { PaginatedMessage } from './PaginatedMessage';\n\nexport class LazyPaginatedMessage extends PaginatedMessage {\n\tpublic async resolvePagesOnStart() {\n\t\tawait this.resolvePage(this.index);\n\t}\n\n\tpublic async resolvePage(index: number = this.index) {\n\t\tawait super.resolvePage(index - 1);\n\t\tawait super.resolvePage(index + 1);\n\n\t\treturn super.resolvePage(index);\n\t}\n}\n"],"names":["isCategoryChannel","channel","type","isDMChannel","isGroupChannel","isGuildBasedChannel","isNewsChannel","isStoreChannel","isTextChannel","isVoiceChannel","PaginatedMessage","[object Object]","pages","actions","defaultActions","Object","Map","this","page","messages","push","action","set","id","index","idle","clear","addActions","addAction","author","resolvePagesOnRun","length","Error","size","firstPage","response","send","keys","react","collector","createReactionCollector","reaction","user","has","emoji","identifier","name","on","async","users","remove","get","run","handler","resolvePage","edit","reactions","removeAll","i","clone","setIndex","setIdle","questionMessage","collected","awaitMessages","message","max","catch","responseMessage","first","deletable","delete","Number","content","isNaN","stop","LazyPaginatedMessage","super"],"mappings":"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"}